from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import mysql.connector
# Database connection settings
config = {
 'host': 'localhost',
 'user': 'your_username',
 'password': 'your_password',
 'database': 'StudentPortal',
}
# Create a connection to the database
cnx = mysql.connector.connect(**config)
cursor = cnx.cursor()
app = FastAPI()
class Student(BaseModel):
 StudentID: int | None
 FirstName: str
 LastName: str
 Email: str
# CRUD API Endpoints
@app.post("/students/")
def create_student(student: Student):
 try:
 query = ("INSERT INTO Students (FirstName, LastName, Email) VALUES (%s, %s, %s)")
 data = (student.FirstName, student.LastName, student.Email)
 cursor.execute(query, data)
 cnx.commit()
 return {"StudentID": cursor.lastrowid, "FirstName": student.FirstName, "LastName": student.LastName, "Email": student.Email}
 except mysql.connector.Error as err:
 raise HTTPException(status_code=400, detail="Error creating student")
@app.get("/students/")
def read_students():
 try:
 query = ("SELECT * FROM Students")
 cursor.execute(query)
 results = cursor.fetchall()
 return [{"StudentID": row[0], "FirstName": row[1], "LastName": row[2], "Email": row[3]} for row in results]
 except mysql.connector.Error as err:
 raise HTTPException(status_code=400, detail="Error reading students")
@app.put("/students/{StudentID}")
def update_student(StudentID: int, student: Student):
 try:
 query = ("UPDATE Students SET FirstName = %s, LastName = %s, Email = %s WHERE StudentID = %s")
 data = (student.FirstName, student.LastName, student.Email, StudentID)
 cursor.execute(query, data)
 cnx.commit()
 return {"message": "Student updated successfully"}
 except mysql.connector.Error as err:
 raise HTTPException(status_code=400, detail="Error updating student")
@app.delete("/students/{StudentID}")
def delete_student(StudentID: int):
 try:
 query = ("DELETE FROM Students WHERE StudentID = %s")
 data = (StudentID,)
 cursor.execute(query, data)
 cnx.commit()
 return {"message": "Student deleted successfully"}
 except mysql.connector.Error as err:
 raise HTTPException(status_code=400, detail="Error deleting student")
